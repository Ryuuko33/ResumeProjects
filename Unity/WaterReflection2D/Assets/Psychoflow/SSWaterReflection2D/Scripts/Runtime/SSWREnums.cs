using UnityEngine;

namespace Psychoflow.SSWaterReflection2D {
	/// <summary>
	/// Displacement mode determines the shape of reflection displacement and foam.
	/// <br/>
	/// It's only used for <see cref="SSWaterReflectionProvider"/>.
	/// </summary>
	public enum DisplacementModes {
		/// <summary>
		/// Use displacement texture.
		/// </summary>
		Texture,
		/// <summary>
		/// Use Voronoi noise.
		/// <br/>
		/// Voronoi noise is generated by calculating distances between a pixel and a lattice of points. By offsetting these points by a pseudo-random number, controlled by input Angle Offset, a cluster of cells can be generated. The scale of these cells, and the resulting noise, is controlled by input Cell Density. The output Cells contains the raw cell data.
		/// </summary>
		Voronoi
	}

	/// <summary>
	/// The blend mode of foam that blends with reflection and refraction.
	/// <br/>
	/// It works like the layer blend mode in Photoshop.
	/// <br/>
	/// It's only used for <see cref="SSWaterReflectionProvider"/>.
	/// </summary>
	public enum FoamBlendMode {
		/// <summary>
		/// Blend two color by source alpha(drawing alpha). Equals lerp(DstColor, SrcColor, SrcAlpha).
		/// </summary>
		Normal,
		/// <summary>
		/// Add source color to destination.
		/// </summary>
		Add,
		/// <summary>
		/// Multiply two colors.
		/// </summary>
		Multiply,
		/// <summary>
		/// Soft light blend mode with Pegtop's formula: https://en.wikipedia.org/wiki/Blend_modes#Soft_Light
		/// </summary>
		Softlight,
	}

	/// <summary>
	/// The way of determining Sorting Layer and Order In Layer of the reflection's <see cref="SpriteRenderer"/>.
	/// <br/>
	/// It's only used for <see cref="SpriteSelfWaterReflection"/>.
	/// </summary>
	public enum ReflectionSortingOrders {
		/// <summary>
		/// The reflection has the same SortingLayer an offset of OrderInLayer with the reflected.
		/// See <see cref="SpriteSelfWaterReflection.CustomOrderInLayer"/>.
		/// </summary>
		OrderInLayerOffset,
		/// <summary>
		/// The defined SortingLayer and OrderInLayer by <see cref="SpriteSelfWaterReflection.CustomSortingLayerID"/> and <see cref="SpriteSelfWaterReflection.CustomOrderInLayer"/> respectively.
		/// </summary>
		CustomSortingOrder
	}

	/// <summary>
	/// The flag that what reflection instance check dirty and update.
	/// <br/>
	/// The checking runs on every late update, so you should choose only necessary options if there's performance issue.
	/// <br/>
	/// It's only used for <see cref="SpriteSelfWaterReflection"/>.
	/// </summary>
	[System.Flags]
	public enum PropertyCheckingFlag {
		/// <summary>
		/// Don't check and update anything. You have to call all update method manually by yourself when it changed.
		/// <br/>
		/// See <see cref="SpriteSelfWaterReflection.UpdateReflectionRenderersPosition"/> and <see cref="SpriteSelfWaterReflection.CheckSpriteRendererPropertiesChanged"/>, 
		/// </summary>
		None = 0,
		/// <summary>
		/// Checking and updating if the transform(position, rotation, and scale) is changed.
		/// <br/>
		/// If you want to update transform manually, call <see cref="SpriteSelfWaterReflection.UpdateReflectionRenderersPosition"/>.
		/// </summary>
		Transform = (1 << 0),
		/// <summary>
		/// Checking and updating the SpriteRenderer.enabled or gameObject.activeInHierarchy is changed. 
		/// <br/>
		/// If you want to update transform manually, call <see cref="SpriteSelfWaterReflection.CheckSpriteRendererPropertiesChanged"/>.
		/// </summary>
		SpriteRendererEnabled = (1 << 1),
		/// <summary>
		/// Checking and updating the SpriteRenderer.orderInLayer or SpriteRenderer.sortingLayer is changed. 
		/// <br/>
		/// If you want to update transform manually, call <see cref="SpriteSelfWaterReflection.CheckSpriteRendererPropertiesChanged"/>.
		/// </summary>
		SpriteRendererSortingOrders = (1 << 2),
		/// <summary>
		/// Checking and updating the other all properties of SpriteRenderer (except for enabled, orderInLayer, sortingLayer, masrkInteraction) is changed.
		/// <br/>
		/// If you want to update transform manually, call <see cref="SpriteSelfWaterReflection.CheckSpriteRendererPropertiesChanged"/>.
		/// </summary>
		SpriteRendererOtherProperties = (1 << 3),

		/// <summary>
		/// Equals Transform | SpriteRendererEnabled.
		/// <br/>
		/// It's the suggestive way for general objects which will only change enabled and transform at runtime.
		/// </summary>
		Transform_Enabled = Transform | SpriteRendererEnabled,

		/// <summary>
		/// Equals Transform | SpriteRendererEnabled | SpriteRendererSortingOrders.
		/// </summary>
		Transform_Enabled_SortingOrders = Transform | SpriteRendererEnabled | SpriteRendererSortingOrders,
	}
}